{
	"info": {
		"_postman_id": "00b75c46-d69d-490d-8495-cdf3ce56dbff",
		"name": "Books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "list all books",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/books",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books"
					]
				},
				"description": "geeft lijst van  alle books in de database. \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "get 1 book",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/books/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"2"
					]
				},
				"description": "geeft 1 book uit de database (met opgegeven id). \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "get 1 unexisting book (ERROR)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/books/222",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"222"
					]
				},
				"description": "geeft 1 book uit de database (met opgegeven id). \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "list all authors",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"authors"
					]
				},
				"description": "geeft lijst van  alle authors in de database. \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "list all books filter on title",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/books?titleKeyWord=dev",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books"
					],
					"query": [
						{
							"key": "titleKeyWord",
							"value": "dev"
						}
					]
				},
				"description": "geeft gefilterde lijst van  alle books in de database. \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "unexisting request (ERROR)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/UNEXISTING",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"UNEXISTING"
					]
				},
				"description": "een GET request naar een url die niet voorzien is in de server. \n\nHier krijg je een 404 error (not found)"
			},
			"response": []
		},
		{
			"name": "create book 7",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "b318395e-a214-4394-8f36-44de98a87792",
						"description": "voor je de Request stuurt zet je in deze Header de waarde uit cookie XSRF-TOKEN",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \"title\":\"bbb\",  \"priceInEur\":10, \"isbn\": \"1234567\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/books",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit book 7",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "e2ebcfd8-3469-4686-a95c-68703df5e0e8",
						"description": "voor je de Request stuurt zet je in deze Header de waarde uit cookie XSRF-TOKEN",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"id\":7, \"title\":\"aaaaa\",   \"isbn\": \"1234567\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/books/7",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete book 7",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "e2ebcfd8-3469-4686-a95c-68703df5e0e8",
						"description": "voor je de Request stuurt zet je in deze Header de waarde uit cookie XSRF-TOKEN",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/api/books/7",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "list authors for book 6",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/books/6/authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"6",
						"authors"
					]
				},
				"description": "geeft lijst van  alle books in de database. \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "list authors for book 7",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/books/7/authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"7",
						"authors"
					]
				},
				"description": "geeft lijst van  alle books in de database. \ngeen authentication nodig."
			},
			"response": []
		},
		{
			"name": "edit authors for book 7",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "e2ebcfd8-3469-4686-a95c-68703df5e0e8",
						"description": "voor je de Request stuurt zet je in deze Header de waarde uit cookie XSRF-TOKEN",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[3,4]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/books/7/authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books",
						"7",
						"authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "genre without authorization header",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/genres",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"genres"
					]
				},
				"description": "GET /api/genre is alleen mogelijk als user ingelogd is (zie SecurityConfiguration.java).\n\nIn dit geval sturen we GEEN Auth info mee in de header, daardoor lukt deze request niet ALS HET DE EERSTE REQUEST IS. \nAls je voordien al een Request met Auth header gestuurd hebt dan onthoudt de browser (of Postman) dat. Er is dan een cookie met de sessie-id van deze user. Als je het JSESSIONID cookie weggooit begin je terug van scratch. \n\nDe server (spring security) valideert user/password. Zie SecurityConfiguration.java."
			},
			"response": []
		},
		{
			"name": "genre with authorization header",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dmVyYTp2ZXJh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/genres",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"genres"
					]
				},
				"description": "GET /api/genre is alleen mogelijk als user ingelogd is (zie SecurityConfiguration.java).\n\nIn dit geval sturen we WEL Auth info mee in de header, daardoor lukt deze request ALTIJD en de browser (of Postman) onthoudt ook dat je ingelogd bent. Er is dan een cookie met de sessie-id van deze user. Als je het JSESSIONID cookie weggooit begin je terug van scratch. \n\nDe server (spring security) valideert user/password. Zie SecurityConfiguration.java."
			},
			"response": []
		},
		{
			"name": "authenticate without authorization header (ERROR)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dmVyYTp2ZXJh",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"authenticate"
					]
				},
				"description": "Als de user al ingelogd is lukt deze request. \nAls de user nog niet ingelogd is geeft deze request een error (401). \n\nGET /api/authenticate is alleen mogelijk als user ingelogd is (zie SecurityConfiguration.java).\n\nIn dit geval sturen we GEEN Auth info mee in de header, daardoor lukt deze request niet ALS HET DE EERSTE REQUEST IS. \nAls je voordien al een Request met Auth header gestuurd hebt dan onthoudt de browser (of Postman) dat. Er is dan een cookie met de sessie-id van deze user. Als je het JSESSIONID cookie weggooit begin je terug van scratch. \n\nDe server (spring security) valideert user/password. Zie SecurityConfiguration.java."
			},
			"response": []
		},
		{
			"name": "authenticate with autorization header",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dmVyYTp2ZXJh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"authenticate"
					]
				},
				"description": "GET /api/authenticate is alleen mogelijk als user ingelogd is (zie SecurityConfiguration.java).\n\nIn dit geval sturen we WEL Auth info mee in de header, daardoor lukt deze request ALTIJD en de browser (of Postman) onthoudt ook dat je ingelogd bent. Er is dan een cookie met de sessie-id van deze user. Als je het JSESSIONID cookie weggooit begin je terug van scratch. \n\nDe server (spring security) valideert user/password. Zie SecurityConfiguration.java."
			},
			"response": []
		},
		{
			"name": "logout",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Basic dmVyYTp2ZXJ",
						"disabled": true
					},
					{
						"key": "X-XSRF-TOKEN",
						"value": "76415192-f8f6-49cf-89a5-209c4c989239",
						"type": "text",
						"description": "voor je de Request stuurt zet je in deze Header de waarde uit cookie XSRF-TOKEN"
					}
				],
				"url": {
					"raw": "{{url}}/logout",
					"host": [
						"{{url}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "list all books with authorization header",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic dmVyYTp2ZXJh",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/api/books",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"books"
					]
				},
				"description": "geeft lijst van  alle books in de database. \ngeen authentication nodig."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8080"
		}
	]
}